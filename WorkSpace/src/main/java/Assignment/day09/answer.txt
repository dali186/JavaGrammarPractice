실습 1)
    1. 예외처리에서 unchecked exception과 checked exception의 차이를 설명하시오.

        unchecked exception은 RuntimeException 클래스를 상속한 예외이다.
        예외처리를 명시하지 않아도 실행이 된다. 실행중에 예외를 확인한다.

        checked exception은 Exception 클래스를 상속한 예외이다.
        예외처리를 명시하지 않으면 컴파일러가 오류를 발생 시키므로 예외를 명시적으로 처리해야한다.

        스프링에서 보통 예외발생 시 checked exception은 non-rollback, unchecked exception은 rollback 방식으로 트랜잭션을 처리가 디폴트지만
        unchecked exception을 @Transactional 어노테이션을 이용하여 개발자가 직접 설정할 수 있다.
        ex)@Transactional(rollbackFor = {클래스})

    2. unchecked exception과 checked exception를 새로운 클래스에 정의하는 방법을 서술하시오.

        unchecked exception은 RuntimeException 클래스를 상속한다.
        checked exception은 Exception클래스를 상속한다.

실습 2)
    아래의 예외 클래스 계층도에서 `unchecked exception`으로 정의된 클래스와 `checked exception`으로 정의된 클래스의 차이점을 설명하시오.
    `unchecked exception`과 `checked exception`으로 정의된 클래스 속성의 차이점에 대해 서술하시오.

        unchecked exception은 Error클래스를 상속한 클래스들과 RuntimeException 클래스를 상속한 예외 클래스들로 이루어져 있다.
        unchecked exception의 한 종류인 NullpointerException처럼 실행중에 발생하는 예외, 미리 예측할 수 없는 예외들이 포함되어있다.
        그렇기 때문에 예외처리를 강제적으로 명시하지 않는다.

        checked exception은 RuntimeException클래스를 제외한 Exception 클래스를 상속한 예외 클래스들이다.
        checked exception의 한 종류인 FileNotFoundException처럼 컴파일시 발생하는 예외, 미리 예측할 수 있는 예외들이 포함되어있다.
        그렇기 때문에 예외처리를 미리 예방하고자 강제적으로 명시한다.

실습 3)
    아래 코드의 문제점을 서술하시오.
        import java.sql.SQLException;

        public class Main {
            public static void main(String[] args) throws Exception {
                /* 예외가 발생할 수 있는 코드 */
                throw new SQLException();
            }
        }

        throws는 메소드에서 처리하지 않은 예외를 호출한 곳으로 위임하는 역할을 하는데
        main함수 호출하는 쪽은 JVM이기 때문에 JVM이 예외 처리를 하게 된다.
        그렇게 되면 예외를 사용자 의도대로 핸들링 할 수 없기 때문에 예외처리를 하지 않은 것과 같다.
        그리고 예외가 발생되면 프로그램은 종료된다.
        그렇기 때문에 main함수에서 예외처리를 해주는 것이 좋다.

        또한 작성한 코드 중에서 SQLException 예외만 발생 할 가능성이 있다면 throws Exception 보다 throws SQLException으로
        변경하여 가독성과 정확성을 높일 수 있다.

